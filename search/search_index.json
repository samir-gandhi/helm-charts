{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This is the documentation for using Helm to deploy the Ping Identity Docker Images. This single chart can be used to deploy any of the available Ping Identity products in a Kubernetes environment. DevOps Resources \u00b6 Ping DevOps Docker Images Github Repos Community Prerequisites \u00b6 Kubernetes 1.16+ Helm 3 Ping Identity DevOps User/Key Adding the Helm Repo \u00b6 helm repo add pingidentity https://helm.pingidentity.com/ Removing the Repo \u00b6 helm repo rm pingidentity","title":"Installation"},{"location":"#welcome","text":"This is the documentation for using Helm to deploy the Ping Identity Docker Images. This single chart can be used to deploy any of the available Ping Identity products in a Kubernetes environment.","title":"Welcome"},{"location":"#devops-resources","text":"Ping DevOps Docker Images Github Repos Community","title":"DevOps Resources"},{"location":"#prerequisites","text":"Kubernetes 1.16+ Helm 3 Ping Identity DevOps User/Key","title":"Prerequisites"},{"location":"#adding-the-helm-repo","text":"helm repo add pingidentity https://helm.pingidentity.com/","title":"Adding the Helm Repo"},{"location":"#removing-the-repo","text":"helm repo rm pingidentity","title":"Removing the Repo"},{"location":"getting-started/","text":"Getting Started \u00b6 Helm is a package deployment tool for Kubernetes. It can be used with PingDevops to deploy all the components of the Solution with a simple command. Pre-Requisites \u00b6 Kubernetes Cluster Helm 3 Ping Identity DevOps User/Key Create Ping DevOps Secret \u00b6 The charts use a secret called devops-secret to obtain an evaluation license for running images. Eval License - Use your PING_IDENTITY_DEVOPS_USER/PING_IDENTITY_DEVOPS_KEY credentials along with your PING_IDENTITY_ACCEPT_EULA setting. For more information on obtaining credentials click here . For more infomration on using ping-devops utility click here . ping-devops generate devops-secret | kubectl apply -f - Install Helm 3 \u00b6 Ensure that you have Helm 3 installed. Installing on MacOS (or linux with brew) brew install helm Installing on other OS - https://helm.sh/docs/intro/install/ Add Helm Ping DevOps Repo \u00b6 helm repo add pingidentity https://helm.pingidentity.com/ List Ping DevOps Charts \u00b6 helm search repo pingidentity Update local machine with latest charts \u00b6 helm repo update Install the Ping DevOps Chart \u00b6 Install the ping-devops chart using the example below. In this case, it is installing a release called pf : PingFederate Admin instance PingFederate Engine instance helm install pf pingidentity/ping-devops \\ --set pingfederate-admin.enabled = true \\ --set pingfederate-engine.enabled = true or, if you have a ping-devops-values.yaml : # ping-devops-values.yaml pingfederate-admin : enabled : true pingfederate-engine : enabled : true helm install pf pingidentity/ping-devops \\ -f ping-devops-values.yaml Accessing Deployments \u00b6 Components of the release will be prefixed with pf . Use kubectl to see the pods created. View kubernetes resources installed: # get just pods kubectl get pods --selector = app.kubernetes.io/instance = pf # or get even more kubectl get all --selector = app.kubernetes.io/instance = pf View Logs (from deployment): kubectl logs deployment/pf-pingfederate-admin Uninstalling Release \u00b6 To uninstall a release from helm, use the following helm uninstall command: helm uninstall pf","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Helm is a package deployment tool for Kubernetes. It can be used with PingDevops to deploy all the components of the Solution with a simple command.","title":"Getting Started"},{"location":"getting-started/#pre-requisites","text":"Kubernetes Cluster Helm 3 Ping Identity DevOps User/Key","title":"Pre-Requisites"},{"location":"getting-started/#create-ping-devops-secret","text":"The charts use a secret called devops-secret to obtain an evaluation license for running images. Eval License - Use your PING_IDENTITY_DEVOPS_USER/PING_IDENTITY_DEVOPS_KEY credentials along with your PING_IDENTITY_ACCEPT_EULA setting. For more information on obtaining credentials click here . For more infomration on using ping-devops utility click here . ping-devops generate devops-secret | kubectl apply -f -","title":"Create Ping DevOps Secret"},{"location":"getting-started/#install-helm-3","text":"Ensure that you have Helm 3 installed. Installing on MacOS (or linux with brew) brew install helm Installing on other OS - https://helm.sh/docs/intro/install/","title":"Install Helm 3"},{"location":"getting-started/#add-helm-ping-devops-repo","text":"helm repo add pingidentity https://helm.pingidentity.com/","title":"Add Helm Ping DevOps Repo"},{"location":"getting-started/#list-ping-devops-charts","text":"helm search repo pingidentity","title":"List Ping DevOps Charts"},{"location":"getting-started/#update-local-machine-with-latest-charts","text":"helm repo update","title":"Update local machine with latest charts"},{"location":"getting-started/#install-the-ping-devops-chart","text":"Install the ping-devops chart using the example below. In this case, it is installing a release called pf : PingFederate Admin instance PingFederate Engine instance helm install pf pingidentity/ping-devops \\ --set pingfederate-admin.enabled = true \\ --set pingfederate-engine.enabled = true or, if you have a ping-devops-values.yaml : # ping-devops-values.yaml pingfederate-admin : enabled : true pingfederate-engine : enabled : true helm install pf pingidentity/ping-devops \\ -f ping-devops-values.yaml","title":"Install the Ping DevOps Chart"},{"location":"getting-started/#accessing-deployments","text":"Components of the release will be prefixed with pf . Use kubectl to see the pods created. View kubernetes resources installed: # get just pods kubectl get pods --selector = app.kubernetes.io/instance = pf # or get even more kubectl get all --selector = app.kubernetes.io/instance = pf View Logs (from deployment): kubectl logs deployment/pf-pingfederate-admin","title":"Accessing Deployments"},{"location":"getting-started/#uninstalling-release","text":"To uninstall a release from helm, use the following helm uninstall command: helm uninstall pf","title":"Uninstalling Release"},{"location":"release-notes/","text":"Release Notes \u00b6 Release 0.3.6 \u00b6 Cleaning up and making services/ingresses easier to use together. Incorporating all the ports used in both a service and ingress into the same location of the services structure . The example below shows a container/service/ingress and how to specify the ports at each level. containerPort - Replaces targetPort servicePort - Replaces port ingressPort - New entry services : api : containerPort : 8443 <--- changed from targetPort servicePort : 1443 <--- changed from port ingressPort : 443 <--- new. moved from ingress dataService : true data-api : containerPort : 9443 <--- changed from targetPort servicePort : 2443 <--- changed from port ingressPort : 2443 <--- new. moved from ingress dataService : true ingress : hosts : - host : pingdirectory.example.com paths : - path : /api backend : serviceName : api <--- changed from servicePort - path : /directory/v1 backend : serviceName : data-api <--- changed from servicePort Additionally, global-env-vars will be created for each of these ports. If the name of the product is PROD , the the following ports would be created: PROD_API_PRIVATE_PORT = \"1443\" # This is the servicePort PROD_API_PUBLIC_PORT = \"443\" # This is the ingressPort PROD_DATA_API_PRIVATE_PORT = \"2443\" PROD_DATA_API_PUBLIC_PORT = \"2443\" Fixed missing USER_BASE_DN setting in simple-sync.yaml example. Release 0.3.5 \u00b6 Allowing config values to determine use of init containers to wait-for other chart products. For each product, you can now provide a waitFor structure providing the name and service that should be waited on before the running container con continue. This will basically inject an initContainer using the PingToolkit wait-for utility until it can nc host:port before continuing. PingFederate Admin waiting on pingdirectory ldaps service to be available pingfederate-admin : container : waitFor : pingdirectory : service : ldaps pingdatagovernance : service : https By default, the pingfederate-engine will waitFor pingfederate-admin before it starts. Release 0.3.4 \u00b6 Adding init container to PingFederate Admin to wait-for PingDirectory's LDAPs port if the pingdirectory.enabled=true. This fixes an issue that keeps PingFederate Admin from starting when it's dependent on PingDirectory. In the case that PingFederate isn't dependent on PingDirectory and it is still enabled, it will simply delay the start time of PingFederate admin. A future version will allow for specifying a list of services to wait-for so this can be turned off/on by deployer. Moved the securityContext settings added to release 0.3.3 from the container to the workload, as that is the proper place to use them. Required for use of fsGroup setting. Release 0.3.3 \u00b6 Adding the ability for a deployer to add a securityContext to the containers. Currently, there are warning messages in the images when an outside-in pattern is used (i.e. securityContext is set). Also, many of the default ports require privileged access, so care should be taken along with testing to ensure the containers start up fine. Additional, one should not change the security context when doing and upgrade or using a PCV from a previous deployment. An example securityContext that can be used might look like: global : container : securityContext : allowPrivilegeEscalation : false capabilities : drop : - ALL runAsGroup : 1000 runAsNonRoot : true runAsUser : 100 By default, the values.yaml in the chart will set the securityContext to empty: global : container : securityContext : {} Release 0.3.2 \u00b6 Replaced init container on pingfederate-engine to use pingtoolkit rather than 3rd party curlimage. Additionally added resource constraints and security context to this init container. Remove hardcoded SERVER_PROFILE_BRANCH set to master, relying on git repo default branch Cleanup pingdelegator values. public hostnames for pingfederate and pingdirectory built based off of ingress hostnames, part of {release-name}-global-env-vars configmap. Remove default nginx annotations of ingress resources. If an nginx controller is used for ingress, the following ingress annotations should be included: Warning By removing the following annotations from the default, use of current config values will result in no ingress being set. You must add these in via your .yaml file or via separate --set settings. global : ingress : annotations : nginx.ingress.kubernetes.io/backend-protocol : \"HTTPS\" kubernetes.io/ingress.class : \"nginx-public\" Release 0.3.1 \u00b6 Add container envFrom for {release-name}-env-vars back as optional. Fixes breaking change from 0.2.8 to 0.2.9 for those that used this configmap. Added ability for deployer to add their own envFrom's via their values.yaml. An example (adding an optional configmap/secrets to all products). Just change global to the name of the product to only have that product use the references. global : container : envFrom : - configMapRef : name : my-killer-configmap optional : true - secretRef : name : my-killer-secrets optional : true Release 0.3.0 \u00b6 Consolidate deployment/stateful set templates to a single workload template. Changes to values.yaml Created a workload map under global (see below) Moved old deployment information under workload Moved old statefulSet information under workload Updated pingfederate-admin to reflect new workload Updated pingdirectory to reflect new workload Allows for any product to be run as a deployment or statefulSet Warning Using workload.type=StatefulSet will create pvc resources and allow for persistence on restarts of containers. This is helpful during development. Be aware that the pvc resources will need to be deleted to startup a fresh copy of the product images. ```yaml global: workload: type: Deployment # Can be Deployment or StatefulSet (see warning above) deployment : strategy : type : RollingUpdate # Can be RollingUpdate or Recreate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : partition : 0 # Used for canary testing if n > 0 persistentvolume : enabled : true ############################################################ # For every volume defined in the volumes list , 3 items will be # created in the StatefulSet # 1 . container . volumeMounts - name and mountPath # 2 . template . spec . volume - name and persistentVolumeClaim . claimName # 3 . spec . volumeClaimTemplates - persistentVolumeClaim # # https :// kubernetes . io /docs/concepts/storage/persistent-volumes/ ############################################################ volumes : out - dir : mountPath : /opt/ out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4 Gi ``` Renamed template files in pinglib from .yaml to .tpl Added terminationGracePeriodSeconds to container to support setting in values Added serviceAccountName to vault.hashicorp to specify to the container what service account can be used to authenticate to the Hashicorp Vault Injector","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#release-036","text":"Cleaning up and making services/ingresses easier to use together. Incorporating all the ports used in both a service and ingress into the same location of the services structure . The example below shows a container/service/ingress and how to specify the ports at each level. containerPort - Replaces targetPort servicePort - Replaces port ingressPort - New entry services : api : containerPort : 8443 <--- changed from targetPort servicePort : 1443 <--- changed from port ingressPort : 443 <--- new. moved from ingress dataService : true data-api : containerPort : 9443 <--- changed from targetPort servicePort : 2443 <--- changed from port ingressPort : 2443 <--- new. moved from ingress dataService : true ingress : hosts : - host : pingdirectory.example.com paths : - path : /api backend : serviceName : api <--- changed from servicePort - path : /directory/v1 backend : serviceName : data-api <--- changed from servicePort Additionally, global-env-vars will be created for each of these ports. If the name of the product is PROD , the the following ports would be created: PROD_API_PRIVATE_PORT = \"1443\" # This is the servicePort PROD_API_PUBLIC_PORT = \"443\" # This is the ingressPort PROD_DATA_API_PRIVATE_PORT = \"2443\" PROD_DATA_API_PUBLIC_PORT = \"2443\" Fixed missing USER_BASE_DN setting in simple-sync.yaml example.","title":"Release 0.3.6"},{"location":"release-notes/#release-035","text":"Allowing config values to determine use of init containers to wait-for other chart products. For each product, you can now provide a waitFor structure providing the name and service that should be waited on before the running container con continue. This will basically inject an initContainer using the PingToolkit wait-for utility until it can nc host:port before continuing. PingFederate Admin waiting on pingdirectory ldaps service to be available pingfederate-admin : container : waitFor : pingdirectory : service : ldaps pingdatagovernance : service : https By default, the pingfederate-engine will waitFor pingfederate-admin before it starts.","title":"Release 0.3.5"},{"location":"release-notes/#release-034","text":"Adding init container to PingFederate Admin to wait-for PingDirectory's LDAPs port if the pingdirectory.enabled=true. This fixes an issue that keeps PingFederate Admin from starting when it's dependent on PingDirectory. In the case that PingFederate isn't dependent on PingDirectory and it is still enabled, it will simply delay the start time of PingFederate admin. A future version will allow for specifying a list of services to wait-for so this can be turned off/on by deployer. Moved the securityContext settings added to release 0.3.3 from the container to the workload, as that is the proper place to use them. Required for use of fsGroup setting.","title":"Release 0.3.4"},{"location":"release-notes/#release-033","text":"Adding the ability for a deployer to add a securityContext to the containers. Currently, there are warning messages in the images when an outside-in pattern is used (i.e. securityContext is set). Also, many of the default ports require privileged access, so care should be taken along with testing to ensure the containers start up fine. Additional, one should not change the security context when doing and upgrade or using a PCV from a previous deployment. An example securityContext that can be used might look like: global : container : securityContext : allowPrivilegeEscalation : false capabilities : drop : - ALL runAsGroup : 1000 runAsNonRoot : true runAsUser : 100 By default, the values.yaml in the chart will set the securityContext to empty: global : container : securityContext : {}","title":"Release 0.3.3"},{"location":"release-notes/#release-032","text":"Replaced init container on pingfederate-engine to use pingtoolkit rather than 3rd party curlimage. Additionally added resource constraints and security context to this init container. Remove hardcoded SERVER_PROFILE_BRANCH set to master, relying on git repo default branch Cleanup pingdelegator values. public hostnames for pingfederate and pingdirectory built based off of ingress hostnames, part of {release-name}-global-env-vars configmap. Remove default nginx annotations of ingress resources. If an nginx controller is used for ingress, the following ingress annotations should be included: Warning By removing the following annotations from the default, use of current config values will result in no ingress being set. You must add these in via your .yaml file or via separate --set settings. global : ingress : annotations : nginx.ingress.kubernetes.io/backend-protocol : \"HTTPS\" kubernetes.io/ingress.class : \"nginx-public\"","title":"Release 0.3.2"},{"location":"release-notes/#release-031","text":"Add container envFrom for {release-name}-env-vars back as optional. Fixes breaking change from 0.2.8 to 0.2.9 for those that used this configmap. Added ability for deployer to add their own envFrom's via their values.yaml. An example (adding an optional configmap/secrets to all products). Just change global to the name of the product to only have that product use the references. global : container : envFrom : - configMapRef : name : my-killer-configmap optional : true - secretRef : name : my-killer-secrets optional : true","title":"Release 0.3.1"},{"location":"release-notes/#release-030","text":"Consolidate deployment/stateful set templates to a single workload template. Changes to values.yaml Created a workload map under global (see below) Moved old deployment information under workload Moved old statefulSet information under workload Updated pingfederate-admin to reflect new workload Updated pingdirectory to reflect new workload Allows for any product to be run as a deployment or statefulSet Warning Using workload.type=StatefulSet will create pvc resources and allow for persistence on restarts of containers. This is helpful during development. Be aware that the pvc resources will need to be deleted to startup a fresh copy of the product images. ```yaml global: workload: type: Deployment # Can be Deployment or StatefulSet (see warning above) deployment : strategy : type : RollingUpdate # Can be RollingUpdate or Recreate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : partition : 0 # Used for canary testing if n > 0 persistentvolume : enabled : true ############################################################ # For every volume defined in the volumes list , 3 items will be # created in the StatefulSet # 1 . container . volumeMounts - name and mountPath # 2 . template . spec . volume - name and persistentVolumeClaim . claimName # 3 . spec . volumeClaimTemplates - persistentVolumeClaim # # https :// kubernetes . io /docs/concepts/storage/persistent-volumes/ ############################################################ volumes : out - dir : mountPath : /opt/ out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4 Gi ``` Renamed template files in pinglib from .yaml to .tpl Added terminationGracePeriodSeconds to container to support setting in values Added serviceAccountName to vault.hashicorp to specify to the container what service account can be used to authenticate to the Hashicorp Vault Injector","title":"Release 0.3.0"},{"location":"config/","text":"Introduction \u00b6 The charts make heavy use of Values yaml files to pass configuration details to the Helm Charts. As defined by Helm Values Files , values are provided the chart using the following mechanisms: values.yaml file in the chart Value files passed to Helm during install/upgrade with the -f flag Individual parameters pass with the --set flag The list above is in order of specificity: values.yaml in the chart can be overridden with -f supplied files, which can in turn be overridden with the --set parameter. The example below shows how values from the chart, user supplied myconfig.yaml and --set parameters are merged with each other to form a merged values. Chart Values \u00b6 To see the values supplied by the chart, simply use the helm show values command to print them. This provides both the data as well as context sensitive comments to each secion. helm show values pingidentity/ping-devops ############################################################ # Ping Identity DevOps values.yaml ############################################################ # ... You can also see all the available values via this values.yaml link The default values are broken up into 2 major sections: global - Represents the base set of values that will be provided to each product section unless it's overridden in that section. product - For every image/product, the values will merged with the global seetings, and take precedenc. Warning Values can only be modified when merged. They cannot be deleted. Also, if a values is set to the boolean true, and merged with a boolean of false, it will always be true. global Section \u00b6 The global: section of the values contains configurations that's available to each products section. If a value is set in globals, that will be available to every prorduct. This is very powerful, as you can turn on the ingress for every product by simply setting: global : ingress : enabled : true This would in essence set ingress.enabled=true for every product: pingaccess : ingress : enabled : true pingdirectory : ingress : enable : true and so on. Much easier to set something in global: section, rather an repeat it for each product. Now, if you only wanted to enable the ingress for a couple of products, then you could leave the default of global.ingress.enabled=false and just set that value for those product sections. product Sections \u00b6 Just like the global: values, each product can have the same values as well as many more that are specific to that product/image. Take the following example in pingdirectory where persistent volume information can be provided: pingdirectory : persistentvolume : enabled : true volumes : - name : out-dir mountPath : /opt/out storage : 8Gi storageClassName :","title":"Introduction"},{"location":"config/#introduction","text":"The charts make heavy use of Values yaml files to pass configuration details to the Helm Charts. As defined by Helm Values Files , values are provided the chart using the following mechanisms: values.yaml file in the chart Value files passed to Helm during install/upgrade with the -f flag Individual parameters pass with the --set flag The list above is in order of specificity: values.yaml in the chart can be overridden with -f supplied files, which can in turn be overridden with the --set parameter. The example below shows how values from the chart, user supplied myconfig.yaml and --set parameters are merged with each other to form a merged values.","title":"Introduction"},{"location":"config/#chart-values","text":"To see the values supplied by the chart, simply use the helm show values command to print them. This provides both the data as well as context sensitive comments to each secion. helm show values pingidentity/ping-devops ############################################################ # Ping Identity DevOps values.yaml ############################################################ # ... You can also see all the available values via this values.yaml link The default values are broken up into 2 major sections: global - Represents the base set of values that will be provided to each product section unless it's overridden in that section. product - For every image/product, the values will merged with the global seetings, and take precedenc. Warning Values can only be modified when merged. They cannot be deleted. Also, if a values is set to the boolean true, and merged with a boolean of false, it will always be true.","title":"Chart Values"},{"location":"config/#global-section","text":"The global: section of the values contains configurations that's available to each products section. If a value is set in globals, that will be available to every prorduct. This is very powerful, as you can turn on the ingress for every product by simply setting: global : ingress : enabled : true This would in essence set ingress.enabled=true for every product: pingaccess : ingress : enabled : true pingdirectory : ingress : enable : true and so on. Much easier to set something in global: section, rather an repeat it for each product. Now, if you only wanted to enable the ingress for a couple of products, then you could leave the default of global.ingress.enabled=false and just set that value for those product sections.","title":"global Section"},{"location":"config/#product-sections","text":"Just like the global: values, each product can have the same values as well as many more that are specific to that product/image. Take the following example in pingdirectory where persistent volume information can be provided: pingdirectory : persistentvolume : enabled : true volumes : - name : out-dir mountPath : /opt/out storage : 8Gi storageClassName :","title":"product Sections"},{"location":"config/container/","text":"Container Configuration \u00b6 Kuernetes Workload Controller resources: Deployments StatefulSets are created depending on configuration values. Global Section \u00b6 Default yaml defined in the global ingress section. global : container : replicaCount : 1 resources : requests : cpu : 500m memory : 500Mi limits : cpu : 4 memory : 8Gi nodeSelector : {} tolerations : [] terminationGracePeriodSeconds : 30 securityContext : {}","title":"Container"},{"location":"config/container/#container-configuration","text":"Kuernetes Workload Controller resources: Deployments StatefulSets are created depending on configuration values.","title":"Container Configuration"},{"location":"config/container/#global-section","text":"Default yaml defined in the global ingress section. global : container : replicaCount : 1 resources : requests : cpu : 500m memory : 500Mi limits : cpu : 4 memory : 8Gi nodeSelector : {} tolerations : [] terminationGracePeriodSeconds : 30 securityContext : {}","title":"Global Section"},{"location":"config/external-image/","text":"External Image Configuration \u00b6 Provides a secret used for obtaining evaluation licenses for Ping Identity products. Global Section \u00b6 Default yaml defined in the global license section, followed by definitions for each parameter. global : externalImage : pingtoolkit : pingidentity/pingtoolkit:latest External Image Parameters Description pingtoolkit Registry, image and tag location for pingtoolkit. Used for primarily during init containers. Private Repository Location Often, if your kubernetes cluster doesn't have access to an external docker repository, you can download and save the pingtoolkit image to your local repo. Setting this to your local location will force the charts to use that image.","title":"External Image"},{"location":"config/external-image/#external-image-configuration","text":"Provides a secret used for obtaining evaluation licenses for Ping Identity products.","title":"External Image Configuration"},{"location":"config/external-image/#global-section","text":"Default yaml defined in the global license section, followed by definitions for each parameter. global : externalImage : pingtoolkit : pingidentity/pingtoolkit:latest External Image Parameters Description pingtoolkit Registry, image and tag location for pingtoolkit. Used for primarily during init containers. Private Repository Location Often, if your kubernetes cluster doesn't have access to an external docker repository, you can download and save the pingtoolkit image to your local repo. Setting this to your local location will force the charts to use that image.","title":"Global Section"},{"location":"config/global/","text":"global: values \u00b6 There is a top level global value providing instructions on how to name all kubernetes resources, so a deployer might deploy several releases under the same namespace. addReleaseNameToResource \u00b6 Provides global ability to add the Helm .Release.Name to kubernetes resources. Value Description Example: (Release.Name=acme, resource=pingdirectory) prepend Prepends the Release.Name DEFAULT acme-pingdirectory append Appends the Release.Name pingdirectory-acme none No use of Release.Name pingdirectory","title":"global"},{"location":"config/global/#global-values","text":"There is a top level global value providing instructions on how to name all kubernetes resources, so a deployer might deploy several releases under the same namespace.","title":"global: values"},{"location":"config/global/#addreleasenametoresource","text":"Provides global ability to add the Helm .Release.Name to kubernetes resources. Value Description Example: (Release.Name=acme, resource=pingdirectory) prepend Prepends the Release.Name DEFAULT acme-pingdirectory append Appends the Release.Name pingdirectory-acme none No use of Release.Name pingdirectory","title":"addReleaseNameToResource"},{"location":"config/image/","text":"Vault Configuration \u00b6 Provides values to define kubernetes image information to deployments and statefulsets. Global Section \u00b6 Default yaml defined in the product vault section. image : image : repository : pingidentity name : # Should be completed in product section tag : 2010 pullPolicy : Always Product Section \u00b6 An example product section specifies the name. pingaccess : image : name : pingaccess To have images use a different repository and tag global : image : tag : edge repository : my.company.docker-repo.com This would result in pulling a pingaccess image: my.company.docker-repo.com/pingaccess:edge","title":"Image"},{"location":"config/image/#vault-configuration","text":"Provides values to define kubernetes image information to deployments and statefulsets.","title":"Vault Configuration"},{"location":"config/image/#global-section","text":"Default yaml defined in the product vault section. image : image : repository : pingidentity name : # Should be completed in product section tag : 2010 pullPolicy : Always","title":"Global Section"},{"location":"config/image/#product-section","text":"An example product section specifies the name. pingaccess : image : name : pingaccess To have images use a different repository and tag global : image : tag : edge repository : my.company.docker-repo.com This would result in pulling a pingaccess image: my.company.docker-repo.com/pingaccess:edge","title":"Product Section"},{"location":"config/ingress/","text":"Ingress Configuration \u00b6 Kuernetes Ingress resources are created depending on configuration values. Global Section \u00b6 Default yaml defined in the global ingress section, followed by definitions for each parameter. global : ingress : enabled : true addReleaseNameToHost : subdomain defaultDomain : example.com defaultTlsSecret : annotations : {} Ingress Parameters Description Options Default Value enabled Enables ingress definition. false addReleaseNameToHost How helm release-name should be added to host. prepend append subdomain none subdomain defaultDomain Default DNS domain to use. Replaces the string \"_defaultDomain_\". example.com defaultTlsSecret Default TLS Secret to use. Replaces the string \"_defaultTlsSecret_\". annotations Annotations are used to provide configuaration details to specific ingress controller types. * see option for nginx ingress {} Annotations example for nginx ingress annotations : nginx.ingress.kubernetes.io/backend-protocol : \"HTTPS\" kubernetes.io/ingress.class : \"nginx-public\" Product Section \u00b6 Default yaml defined in the product ingress section, followed by definitions for each parameter. ingress : hosts : - host : pingfederate-admin._defaultDomain_ paths : - path : / backend : serviceName : admin tls : - secretName : _defaultTlsSecret_ hosts : Ingress Parameters Description Default Value hosts Array of hosts definitions hosts[].host Full DNS name of host to use for external name. \"_defaultDomain_\" will be replaced with .defaultDomain {product-name}._defaultDomain_ hosts[].paths Array of paths to define for host hosts[].paths[].path Path on external ingress hosts[].paths[].backend.serviceName Name of the service to map to. This will result in the ingressPort on the server to be used. tls Array of tls definitions tls[].secretName Certificate secret to use _defaultTlsSecret_ tls[].hosts Array of specific hosts Example Use of _defaultDomain_ and addReleaseNameToHost helm ReleaseName = acme defaultDomain = example.com addReleaseNameToHost = subdomain ingress.hosts[0].host = pingfed-admin._defaultDomain_ Resulting host will be: pingfed-admin.acme.example.com ^ ^^^^^^^ | | ReleseName defaultDomain Example Ingress Manifest \u00b6 Example product ingress for pingfederate-admin when deployed by helm with a release-name of acme. Includes an ingress for admin service (9999) using the default domain and tls secret, defined in the global section, if set. kind : Ingress metadata : annotations : .... spec : rules : - host : pingfederate-admin.acme.example.com http : paths : - backend : serviceName : acme-pingfederate-admin serviceName : admin path : / tls : - hosts : - pingfederate-admin.acme.example.com secretName : \"\"","title":"Ingress"},{"location":"config/ingress/#ingress-configuration","text":"Kuernetes Ingress resources are created depending on configuration values.","title":"Ingress Configuration"},{"location":"config/ingress/#global-section","text":"Default yaml defined in the global ingress section, followed by definitions for each parameter. global : ingress : enabled : true addReleaseNameToHost : subdomain defaultDomain : example.com defaultTlsSecret : annotations : {} Ingress Parameters Description Options Default Value enabled Enables ingress definition. false addReleaseNameToHost How helm release-name should be added to host. prepend append subdomain none subdomain defaultDomain Default DNS domain to use. Replaces the string \"_defaultDomain_\". example.com defaultTlsSecret Default TLS Secret to use. Replaces the string \"_defaultTlsSecret_\". annotations Annotations are used to provide configuaration details to specific ingress controller types. * see option for nginx ingress {} Annotations example for nginx ingress annotations : nginx.ingress.kubernetes.io/backend-protocol : \"HTTPS\" kubernetes.io/ingress.class : \"nginx-public\"","title":"Global Section"},{"location":"config/ingress/#product-section","text":"Default yaml defined in the product ingress section, followed by definitions for each parameter. ingress : hosts : - host : pingfederate-admin._defaultDomain_ paths : - path : / backend : serviceName : admin tls : - secretName : _defaultTlsSecret_ hosts : Ingress Parameters Description Default Value hosts Array of hosts definitions hosts[].host Full DNS name of host to use for external name. \"_defaultDomain_\" will be replaced with .defaultDomain {product-name}._defaultDomain_ hosts[].paths Array of paths to define for host hosts[].paths[].path Path on external ingress hosts[].paths[].backend.serviceName Name of the service to map to. This will result in the ingressPort on the server to be used. tls Array of tls definitions tls[].secretName Certificate secret to use _defaultTlsSecret_ tls[].hosts Array of specific hosts Example Use of _defaultDomain_ and addReleaseNameToHost helm ReleaseName = acme defaultDomain = example.com addReleaseNameToHost = subdomain ingress.hosts[0].host = pingfed-admin._defaultDomain_ Resulting host will be: pingfed-admin.acme.example.com ^ ^^^^^^^ | | ReleseName defaultDomain","title":"Product Section"},{"location":"config/ingress/#example-ingress-manifest","text":"Example product ingress for pingfederate-admin when deployed by helm with a release-name of acme. Includes an ingress for admin service (9999) using the default domain and tls secret, defined in the global section, if set. kind : Ingress metadata : annotations : .... spec : rules : - host : pingfederate-admin.acme.example.com http : paths : - backend : serviceName : acme-pingfederate-admin serviceName : admin path : / tls : - hosts : - pingfederate-admin.acme.example.com secretName : \"\"","title":"Example Ingress Manifest"},{"location":"config/license/","text":"License Configuration \u00b6 Provides a secret used for obtaining evaluation licenses for Ping Identity products. Global Section \u00b6 Default yaml defined in the global license section, followed by definitions for each parameter. global : license : secret : devOps : devops-secret License Parameters Description Default Value secret.devops Secret containing PING_IDENTITY_DEVOPS_USER/KEY values. devops-secret Creating your devops-secret Assumes use of the ping-devops command-line tool to create the devops-secret with your Ping Identity DevOps User & Key . ping-devops generate devops-secret | kubectl apply -f -","title":"License"},{"location":"config/license/#license-configuration","text":"Provides a secret used for obtaining evaluation licenses for Ping Identity products.","title":"License Configuration"},{"location":"config/license/#global-section","text":"Default yaml defined in the global license section, followed by definitions for each parameter. global : license : secret : devOps : devops-secret License Parameters Description Default Value secret.devops Secret containing PING_IDENTITY_DEVOPS_USER/KEY values. devops-secret Creating your devops-secret Assumes use of the ping-devops command-line tool to create the devops-secret with your Ping Identity DevOps User & Key . ping-devops generate devops-secret | kubectl apply -f -","title":"Global Section"},{"location":"config/probes/","text":"Probes Configuration \u00b6 Kuernetes Probes resources to be added to workloads (i.e. Deployments/StatefulSets). Global Section \u00b6 Default yaml defined in the global probes section. global : probes : liveness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 readiness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 The definition of parameters can be found at probe definitions","title":"Probes"},{"location":"config/probes/#probes-configuration","text":"Kuernetes Probes resources to be added to workloads (i.e. Deployments/StatefulSets).","title":"Probes Configuration"},{"location":"config/probes/#global-section","text":"Default yaml defined in the global probes section. global : probes : liveness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 readiness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 The definition of parameters can be found at probe definitions","title":"Global Section"},{"location":"config/service/","text":"Service Configuration \u00b6 Kuernetes Service resources are created depending on configuration values. Product Section \u00b6 Default yaml defined in the product services section. The example found in the pingfederate-admin section is: services : admin : servicePort : 9999 containerPort : 9999 ingressPort : 443 dataService : true clusterbind : servicePort : 7600 containerPort : 7600 clusterService : true clusterfail : servicePort : 7700 containerPort : 7700 clusterService : true clusterExternalDNSHostname : Service Parameters Description services Array of services services[].{name} Service Name. (i.e. https, ldap, admin, api) services[].{name}.servicePort External port of service services[].{name}.containerPort Port on target container services[].{name}.ingressPort Port on ingress container (if ingress is used) services[].{name}.dataService Adds to a ClusterIP service with single DNS/IP services[].{name}.clusterService Adds to a headless service with DNS request returning all IPs services.clusterExternalDNSHostname The example above will create a container/service/ingress that looks like: +-------------+ +-----------+ +-----------+ | Container |--(9999)-------| Service |-(9999)-------| Ingress |-(443)--- +-------------+ +-----------+ +-----------+ +-------------+ (7600) +-----------+ (7600) | Container |--(7700)-------| Service |-(7700) +-------------+ +-----------+","title":"Service"},{"location":"config/service/#service-configuration","text":"Kuernetes Service resources are created depending on configuration values.","title":"Service Configuration"},{"location":"config/service/#product-section","text":"Default yaml defined in the product services section. The example found in the pingfederate-admin section is: services : admin : servicePort : 9999 containerPort : 9999 ingressPort : 443 dataService : true clusterbind : servicePort : 7600 containerPort : 7600 clusterService : true clusterfail : servicePort : 7700 containerPort : 7700 clusterService : true clusterExternalDNSHostname : Service Parameters Description services Array of services services[].{name} Service Name. (i.e. https, ldap, admin, api) services[].{name}.servicePort External port of service services[].{name}.containerPort Port on target container services[].{name}.ingressPort Port on ingress container (if ingress is used) services[].{name}.dataService Adds to a ClusterIP service with single DNS/IP services[].{name}.clusterService Adds to a headless service with DNS request returning all IPs services.clusterExternalDNSHostname The example above will create a container/service/ingress that looks like: +-------------+ +-----------+ +-----------+ | Container |--(9999)-------| Service |-(9999)-------| Ingress |-(443)--- +-------------+ +-----------+ +-----------+ +-------------+ (7600) +-----------+ (7600) | Container |--(7700)-------| Service |-(7700) +-------------+ +-----------+","title":"Product Section"},{"location":"config/vault/","text":"Vault Configuration \u00b6 Based on use of Hashicorp Vault. More information on Hashicorp Vault annotations can be found here . Global Section \u00b6 Default yaml defined in the product vault section. global : vault : enabled : false hashicorp : role : k8s-default log-level : info preserve-secret-case : true secret-volume-path : /run/secrets pre-populate-only : true serviceAccountName : vault-auth # secretPrefix: path/to/secrets # secrets: # - name: secret-name # secret: secret-name The definition of parameters can be found at vault definitions The example above would translate to a workload manifest of annotations : vault.hashicorp.com/agent-inject : \"true\" vault.hashicorp.com/agent-inject-secret-secret-name.json : path/to/secrets/secret-name vault.hashicorp.com/agent-inject-template-secret-name.json : | {{ with secret \"path/to/secrets/secret-name/secret-name\" -}} {{ .Data.data | toJSONPretty }} {{- end }} vault.hashicorp.com/agent-pre-populate-only : \"true\" vault.hashicorp.com/log-level : info vault.hashicorp.com/preserve-secret-case : \"true\" vault.hashicorp.com/role : k8s-default vault.hashicorp.com/secret-volume-path : /run/secrets","title":"Vault"},{"location":"config/vault/#vault-configuration","text":"Based on use of Hashicorp Vault. More information on Hashicorp Vault annotations can be found here .","title":"Vault Configuration"},{"location":"config/vault/#global-section","text":"Default yaml defined in the product vault section. global : vault : enabled : false hashicorp : role : k8s-default log-level : info preserve-secret-case : true secret-volume-path : /run/secrets pre-populate-only : true serviceAccountName : vault-auth # secretPrefix: path/to/secrets # secrets: # - name: secret-name # secret: secret-name The definition of parameters can be found at vault definitions The example above would translate to a workload manifest of annotations : vault.hashicorp.com/agent-inject : \"true\" vault.hashicorp.com/agent-inject-secret-secret-name.json : path/to/secrets/secret-name vault.hashicorp.com/agent-inject-template-secret-name.json : | {{ with secret \"path/to/secrets/secret-name/secret-name\" -}} {{ .Data.data | toJSONPretty }} {{- end }} vault.hashicorp.com/agent-pre-populate-only : \"true\" vault.hashicorp.com/log-level : info vault.hashicorp.com/preserve-secret-case : \"true\" vault.hashicorp.com/role : k8s-default vault.hashicorp.com/secret-volume-path : /run/secrets","title":"Global Section"},{"location":"config/workload/","text":"Workload Configuration \u00b6 Kuernetes Workload resources: Deployments StatefulSets are created depending on configuration values. Global Section \u00b6 Default yaml defined in the product workload section. global : workload : type : Deployment deployment : strategy : type : RollingUpdate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : partition : 0 persistentvolume : enabled : true volumes : out-dir : mountPath : /opt/out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4Gi securityContext : {} Workload Parameters Description type One of Deployment or StatefulSet deployment.strategy.type One of RollingUpdate or ReCreate deployment.strategy.rollingUpdate If type=RollingUpdate statefulSet.partition Used for canary testing if n>0 statefulSet.persistentVolume Provides details around creation of PVC/Volumes (see below) securityCotext Provides security context details for starting container as different user/group (see below) Persistent Volumes For every volume defined in the volumes list, 3 items will be created in the StatefulSet: container.volumeMounts - name and mountPath template.spec.volume - name and persistentVolumeClaim.claimName spec.volumeClaimTemplates - persistentVolumeClaim More Info - https://kubernetes.io/docs/concepts/storage/persistent-volumes/ Security Context To run the containers with a different user/group/fsgroup, use the following example to set those details on the deployment/statefulset: global : workload : container : securityContext : runAsGroup : 1000 runAsUser : 3000 fsGroup : 2000","title":"Workload"},{"location":"config/workload/#workload-configuration","text":"Kuernetes Workload resources: Deployments StatefulSets are created depending on configuration values.","title":"Workload Configuration"},{"location":"config/workload/#global-section","text":"Default yaml defined in the product workload section. global : workload : type : Deployment deployment : strategy : type : RollingUpdate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : partition : 0 persistentvolume : enabled : true volumes : out-dir : mountPath : /opt/out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4Gi securityContext : {} Workload Parameters Description type One of Deployment or StatefulSet deployment.strategy.type One of RollingUpdate or ReCreate deployment.strategy.rollingUpdate If type=RollingUpdate statefulSet.partition Used for canary testing if n>0 statefulSet.persistentVolume Provides details around creation of PVC/Volumes (see below) securityCotext Provides security context details for starting container as different user/group (see below) Persistent Volumes For every volume defined in the volumes list, 3 items will be created in the StatefulSet: container.volumeMounts - name and mountPath template.spec.volume - name and persistentVolumeClaim.claimName spec.volumeClaimTemplates - persistentVolumeClaim More Info - https://kubernetes.io/docs/concepts/storage/persistent-volumes/ Security Context To run the containers with a different user/group/fsgroup, use the following example to set those details on the deployment/statefulset: global : workload : container : securityContext : runAsGroup : 1000 runAsUser : 3000 fsGroup : 2000","title":"Global Section"},{"location":"devops/","text":"Ping Identity Helm Charts \u00b6 This repository provides sample Helm charts for Ping Identity products for community use. These helm charts are intended to be a good starting point and can be used and altered as required. Charts \u00b6 Chart Type Capability Status Scalable DevOps Full Application Includes all PingIdentity Charts Available (Beta) Yes PingFederate Product SSO / Authentication Authority Available (Beta) Yes PingAccess Product Medium/Course grain Authorization Gateway/PEP Available (Beta) No (TBC) PingDirectory Product User/Device/Consent/Organisation Directory Available (Beta) Yes PingDataConsole Product PingData Admin Console Available (Beta) Not required PingDataSync Product Data Synchronisation Engine Not available N/a PingDelegator Product Delegated User Management UI Not available Yes","title":"Ping Identity Helm Charts"},{"location":"devops/#ping-identity-helm-charts","text":"This repository provides sample Helm charts for Ping Identity products for community use. These helm charts are intended to be a good starting point and can be used and altered as required.","title":"Ping Identity Helm Charts"},{"location":"devops/#charts","text":"Chart Type Capability Status Scalable DevOps Full Application Includes all PingIdentity Charts Available (Beta) Yes PingFederate Product SSO / Authentication Authority Available (Beta) Yes PingAccess Product Medium/Course grain Authorization Gateway/PEP Available (Beta) No (TBC) PingDirectory Product User/Device/Consent/Organisation Directory Available (Beta) Yes PingDataConsole Product PingData Admin Console Available (Beta) Not required PingDataSync Product Data Synchronisation Engine Not available N/a PingDelegator Product Delegated User Management UI Not available Yes","title":"Charts"},{"location":"examples/","text":"Helm Chart Example Configs \u00b6 The folowing contains example configs and examples of how to run and configure ping products using the Ping Devops Helm Chart. Please review the Getting Started Page before trying them. Config Description .yaml Everything Example with most products integrated together everything.yaml PingFederate PingFederate Admin Console & Engine pingfederate.yaml Simple Sync PingDataSync and PingDirectory simple-sync.yaml To Deploy \u00b6 helm upgrade --install my-release pingidentity/ping-devops \\ -f <HTTP link to yaml> Uninstall \u00b6 helm uninstall my-release","title":"Introduction"},{"location":"examples/#helm-chart-example-configs","text":"The folowing contains example configs and examples of how to run and configure ping products using the Ping Devops Helm Chart. Please review the Getting Started Page before trying them. Config Description .yaml Everything Example with most products integrated together everything.yaml PingFederate PingFederate Admin Console & Engine pingfederate.yaml Simple Sync PingDataSync and PingDirectory simple-sync.yaml","title":"Helm Chart Example Configs"},{"location":"examples/#to-deploy","text":"helm upgrade --install my-release pingidentity/ping-devops \\ -f <HTTP link to yaml>","title":"To Deploy"},{"location":"examples/#uninstall","text":"helm uninstall my-release","title":"Uninstall"}]}